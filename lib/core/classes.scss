@charset "utf-8";

/**
 * Directory: lib/core/classes.scss
 * Global Classes 约定常规解决方案
 * Author: joy.du(飘零雾雨)
 * Time: 2012.1.1
 */


/**
 * 定义响应式方案
 * @method responsive
 * @param {String} $media 指定媒体查询条件
 * 使用方法如下，结合variables中的$media-types：
    @include responsive(phone) {
        .foo {
            background: blue;
        }
    }
 */
@mixin responsive($media){
    @if not map-has-key($media-types, $media) {
        @warn "#{$media} is not a known media type. Using portrait instead.";
        $media: portrait;
    }
    @media #{map-get($media-types, $media)} {
        @content;
    }
}


/**
 * 定义字体图标
 * @method yofont
 */
@mixin yofont(){
    // 是否开启图标字体
    @if map-get($ico,is-use) {
        @font-face {
            font-family: map-get($ico, font-name);
            // 如果只需要其中的某种字体，其它的几种字体可以使用空文件（不会请求），但必须存在
            // IE9
            src: url(#{map-get($ico,font-path)}#{map-get($ico,font-name)}.eot);
            src: 
                // IE6-8
                url(#{map-get($ico,font-path)}#{map-get($ico,font-name)}.eot?#iefix) format("embedded-opentype"),
                // chrome、firefox
                url(#{map-get($ico,font-path)}#{map-get($ico,font-name)}.woff) format("woff"),
                // chrome、firefox、opera、Safari, Android, iOS 4.2+
                url(#{map-get($ico,font-path)}#{map-get($ico,font-name)}.ttf) format("truetype"),
                // iOS 4.1-
                url(#{map-get($ico,font-path)}#{map-get($ico,font-name)}.svg#iconfont) format("svg");
        }
        .yo-ico {
            font-family: map-get($ico, font-name) !important;
            font-style: normal;
            -webkit-font-smoothing: antialiased;
            -webkit-text-stroke-width: .1px;
            -moz-osx-font-smoothing: grayscale;
            vertical-align: middle;
        }
    }
}


/**
 * 定义UA默认外观
 * @method appearance
 * @param {String} $appearance 指定UA外观类型
 */
@mixin appearance($appearance:none){
    // 是否开启厂商前缀支持
    @if map-get($setting,is-vendor-prefix) {
        // 遍历输出厂商代码
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}appearance: $appearance;
        }
    }
    appearance: $appearance;
}

/**
 * 定义是否可以选中元素
 * @method user-select
 * @param {String} $user-select 指定是否可以选中
 */
@mixin user-select($user-select:none){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}user-select: $user-select;
        }
    }
    user-select: $user-select;
}

/**
 * 定义渐变色值
 * @method gradient
 * @param {String} $type 指定渐变的4种类型：linear, repeating-linear, radial, repeating-radial
 * @param {String} $gradient 指定渐变取值，与原生语法一致
 */
@mixin gradient($type,$gradient...){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            background-image: #{$vendor}#{$type}-gradient($gradient);
        }
    }
    background-image: #{$type}-gradient($gradient);
}

/**
 * 定义盒模型
 * @method box-sizing
 * @param {String} $box-sizing 的2个值分别为：content-box(标准盒模型) | border-box(怪异盒模型)
 */
@mixin box-sizing($box-sizing){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}box-sizing: $box-sizing;
        }
    }
    box-sizing: $box-sizing;
}

/**
 * 定义简单变换
 * @method transform
 * @param {String} $transform 取值与原生语法一致
 */

@mixin transform($transform...){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}transform: $transform;
        }
    }
    transform: $transform;
}
/**
 * 定义变换原点
 * @method transform-origin
 * @param {String} $transform-origin 取值与原生语法一致
 */
@mixin transform-origin($origin){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}transform-origin: $origin;
        }
    }
    transform-origin: $origin;
}

/**
 * 定义动画
 * @method animation
 * @param {String} $animation 取值与原生语法一致
 */
@mixin animation($animation...){
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            #{$vendor}animation: $animation;
        }
    }
    animation: $animation;
}

/**
 * 定义补间
 * @method transition
 * @param {String} $transition 取值与原生语法一致
 */
// @mixin transition($transition...){
//     @if map-get($setting,is-vendor-prefix) {
//         @each $vendor in map-get($setting,vendor-prefix) {
//             #{$vendor}transition: $transition;
//         }
//     }
//     transition: $transition;
// }


@mixin transition($transition...){
    $vendor-list:();
    $list:();
    @if map-get($setting,is-vendor-prefix) {
        @each $vendor in map-get($setting,vendor-prefix) {
            @for $i from 1 through length($transition) {
                $vendor-list:join($vendor-list, #{$vendor}#{nth($transition, $i)},$separator:comma);
            }
            #{$vendor}transition:$vendor-list;
            $vendor-list:();
        }
    }
    @for $i from 1 through length($transition) {
        $list:join($list, #{nth($transition, $i)},$separator:comma);
    }
    transition:$list;
}

// 定义伸缩盒
@mixin flexbox($flexbox:flex){
    @if $flexbox == flex {
        display: -webkit-box;
        display: -webkit-flex;
        display: flex;
    } @else {
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: inline-flex;
    }
}
// 定义伸缩盒子元素如何分配空间
@mixin flex($flex:1){
    -webkit-box-flex: $flex;
    -webkit-flex: $flex;
    flex: $flex;
    // iOS6要求所有的伸缩盒子元素需要为非inline
    display: block;
    // 修复iOS6下不均分bug，任意非auto的值
    width: 100%;
}
// 定义伸缩盒子元素的排版顺序
@mixin order($order:1){
    -webkit-box-ordinal-group: $order;
    -webkit-order: $order;
    order: $order;
}
// 定义伸缩盒子元素的流动方向
@mixin flex-direction($flex-direction:row){
    @if $flex-direction == row {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
    } @else if $flex-direction == column {
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
    } @else if $flex-direction == row-reverse {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
    } @else if $flex-direction == column-reverse {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
    }
    -webkit-flex-direction: $flex-direction;
    flex-direction: $flex-direction;
}
// 定义伸缩盒子元素溢出排版
@mixin flex-wrap($flex-wrap:nowrap){
    @if $flex-wrap == nowrap {
        -webkit-box-lines: single;
    } @else {
        -webkit-box-lines: multiple;
    }
    -webkit-flex-wrap: $flex-wrap;
    flex-wrap: $flex-wrap;
}
// 定义伸缩盒子元素的水平对齐方式
@mixin justify-content($justify-content:center){
    @if $justify-content == center {
        -webkit-box-pack: center;
    } @else if $justify-content == flex-start {
        -webkit-box-pack: start;
    } @else if $justify-content == flex-end {
        -webkit-box-pack: end;
    } @else if $justify-content == space-between {
        -webkit-box-pack: justify;
    }
    -webkit-justify-content: $justify-content;
    justify-content: $justify-content;
}
// 定义伸缩盒子元素的垂直对齐方式
@mixin align-items($align-items:center){
    @if $align-items == center {
        -webkit-box-align: center;
    } @else if $align-items == flex-start {
        -webkit-box-align: start;
    } @else if $align-items == flex-end {
        -webkit-box-align: end;
    } @else {
        -webkit-box-align: $align-items;
    }
    -webkit-align-items: $align-items;
    align-items: $align-items;
}
// 定义伸缩盒子元素自身的垂直对齐方式
@mixin align-self($align-self:center){
    -webkit-align-self: $align-self;
    align-self: $align-self;
}

// 定义滚动条
@mixin overflow($overflow:auto){
    @if $overflow == auto {
        overflow: auto;
        -webkit-overflow-scrolling: touch;
    } @else {
        overflow: $overflow;
    }   
}

// 生成矩形方法
@mixin rect($width, $height){
    width: $width;
    height: $height;
}
// 生成正方形方法
@mixin square($size){
    width: $size;
    height: $size;
}
// 生成圆形方法
@mixin circle($radius:50%){
    border-radius: $radius;
}

// 清除浮动方案
@mixin clearfix(){
    &::after{
        display: block;
        overflow: hidden;
        clear: both;
        height: 0;
        content: "\0020";
    }
}

// 隐藏方案
@mixin hide(){
    display: none;
}

// 显示方案
@mixin show(){
    display: block;
}

// 链接处理方式
@mixin link($color: map-get($base, link-color)){
    color: $color;
    cursor: pointer;
    &:active{
        opacity: .5;
    }
}

// 强制换行方案
@mixin wrap(){
    word-wrap: break-word;
    word-break: break-all;
}

// 单行文本溢出显示方案
@mixin ellipsis($ellipsis:yes){
    overflow: hidden;
    white-space: nowrap;
    @if $ellipsis == yes {
        text-overflow: ellipsis;
    }
}

// 图文替换方案
@mixin texthide(){
    overflow: hidden;
    white-space: nowrap;
    text-indent: 100%;
}

// 清除间隙方案-容器
@mixin killspace(){
    font-size: 0;
    font-family: arial;
}

// 清除间隙方案-子级
@mixin killspace-item(){
    display: inline-block;
    font-size: map-get($base, font-size);
    font-family: map-get($base, font-family);
}

// 未知尺寸元素垂直居中解决方案-容器
@mixin valign(){
    @include killspace();
    &::after{
        overflow: hidden;
        width: 0;
        height: 100%;
        content: "\0020";
    }
}
// 未知尺寸元素垂直居中解决方案-子级
@mixin valign-item(){
    @include killspace-item();
    vertical-align: middle;
}

// 已经尺寸元素垂直居中解决方案
@mixin alignment($width:200px, $height:200px){
    position: absolute;
    top: 50%;
    left: 50%;
    width: $width;
    height: $height;
    margin-top: -$height/2;
    margin-left: -$width/2;
}